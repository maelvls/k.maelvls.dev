#! /usr/bin/env bash

# General prerequisites (dealt with by terraform):
#  - the kubectl context "boring_wozniak" exists.

source .envrc # if you have direnv, skip this
kubectl config use-context boring_wozniak

# Cert-manager related.
#
# Prerequisites (dealt with by terraform):
#  - the namespace "cert-manager" exists
#  - the secret cert-manager/jsonkey contains data.jsonkey which is the
#    private key as given by 'gcloud iam service-accounts keys create'.
#    This json key must refer to a service account that has the
#    role 'roles/dns.admin'.
#
# NOTE: when trying to recreate a GCP serviceaccount, first
# delete the role bindings! Otherwise, the recreated serviceaccount will not
# have the right role binding, see
# https://twitter.com/maelvls/status/1239104479951310848.
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.crds.yaml
helm repo add jetstack https://charts.jetstack.io
helm upgrade --install cert-manager jetstack/cert-manager --create-namespace --namespace cert-manager --values helm/cert-manager.yaml
kubectl apply -f helm/cert-manager-issuers.yaml

# External-dns related.
#
# Prerequisites (dealt with by terraform):
#  - the namespace "external-dns" exists
#  - the secret "external-dns/jsonkey" contains data.jsonkey which is the
#    private key as given by 'gcloud iam service-accounts keys create'.
#    This json key must refer to a service account that has the
#    role 'roles/dns.admin'.
helm repo add bitnami https://charts.bitnami.com/bitnami
helm upgrade --install external-dns bitnami/external-dns --create-namespace --namespace external-dns --values helm/external-dns.yaml

# Traefik-related. I use traefik since its ingress support is excellent.
helm repo add traefik https://containous.github.io/traefik-helm-chart
kubectl create namespace traefik --dry-run -oyaml | kubectl apply -f-
helm upgrade --install traefik traefik/traefik --create-namespace --namespace traefik --values helm/traefik.yaml

# Minio-related.
#
# Prerequisites (manual, don't forget to setup .envrc.example):
#  - set MINIO_ACCESS_KEY and MINIO_SECRET_KEY with some randomly
#    generated strings.
helm repo add minio https://helm.min.io/
helm upgrade --install minio minio/minio --create-namespace --namespace minio --values helm/minio.yml
kubectl -n minio create secret generic minio --from-literal=accesskey=$MINIO_ACCESS_KEY --from-literal=secretkey=$MINIO_SECRET_KEY --dry-run -oyaml | kubectl apply -f-
# mc config host add maelvls https://minio.k.maelvls.dev <1password> <1password> --api=s3v4 --lookup=auto
# mc ls maelvls/

# Drone-related.
#
# Prerequisites (manual, don't forget to setup .envrc.example):
#  - the github app "Mael's Drone" exists and DRONE_GITHUB_CLIENT_ID
#    and DRONE_GITHUB_CLIENT_SECRET are set.
#  - the DRONE_RPC_SECRET is set with some randomly generated secret.
kubectl create namespace drone
helm repo add drone https://charts.drone.io
helm upgrade --install --create-namespace --namespace drone drone drone/drone --values helm/drone.yaml --set env.DRONE_GITHUB_CLIENT_ID=$DRONE_GITHUB_CLIENT_ID --set env.DRONE_GITHUB_CLIENT_SECRET=$DRONE_GITHUB_CLIENT_SECRET --set env.DRONE_RPC_SECRET=$DRONE_RPC_SECRET

# Concourse-related (https://github.com/concourse/concourse-chart)
#
# Prerequisites (manual, don't forget to setup .envrc.example):
#  - the github app "Mael's Concourse" exists and C_GITHUB_CLIENT_ID and
#    C_GITHUB_CLIENT_SECRET are set.
#  - the DRONE_RPC_SECRET is set with some randomly generated secret.
#
# WATCH OUT, helm applies stuff to the --namespace given ("concourse"). But
# it also creates an EMPTY namespace "concourse-main" (${RELEASE}-main)
# which serves to the target/team "main" if you use it.
kubectl create namespace concourse
helm repo add concourse https://concourse-charts.storage.googleapis.com
helm upgrade --install concourse concourse/concourse --create-namespace --namespace concourse --values helm/concourse.yaml --set secrets.githubClientId=$C_GITHUB_CLIENT_ID --set secrets.githubClientSecret=$C_GITHUB_CLIENT_SECRET

# External CoreDNS (michael's k8s_gateway)
#
# I moved from ExternalDNS to CoreDNS + k8s_gateway.
# https://github.com/ori-edge/k8s_gateway
kubectl apply -f helm/ext-coredns.yaml

# OpenFaas
kubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml
helm repo add openfaas https://openfaas.github.io/faas-netes/
kubectl -n openfaas create secret generic basic-auth --from-literal=basic-auth-user=admin --from-literal=basic-auth-password="$OPENFAAS_PWD" --dry-run=client -oyaml | kubectl apply -f-
helm upgrade --install openfaas openfaas/openfaas --create-namespace --namespace openfaas --values helm/openfaas.yaml

# users-grpc

helm repo add maelvls https://maelvls.dev/helm-charts
helm upgrade --install users-grpc maelvls/users-grpc --create-namespace --namespace users-grpc --values helm/users-grpc.yaml
kubectl apply -f helm/users-grpc-ingressroute.yaml
